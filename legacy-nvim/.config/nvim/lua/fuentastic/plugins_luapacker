local utils = require("fuentastic.utils")
local fn = vim.fn

local packer_bootstrap
if not utils.is_plugin_installed("packer.nvim") then
  packer_bootstrap = fn.system({
    "git",
    "clone",
    "--depth",
    "1",
    "https://github.com/wbthomason/packer.nvim",
    utils.plugins_path .. "/start/packer.nvim",
  })
  vim.cmd([[packadd packer.nvim]])
end

local status, packer = pcall(require, "packer")
if (not status) then
  print("Packer is not installed")
  return
end

vim.cmd [[packadd packer.nvim]]

packer.startup({ function(use)
  use 'wbthomason/packer.nvim'
  -- use 'shaunsingh/nord.nvim'
  use "rebelot/kanagawa.nvim"
  use { "catppuccin/nvim", as = "catppuccin" }

  use 'nvim-lualine/lualine.nvim' -- Statusline
  use 'nvim-lua/plenary.nvim' -- Common utilities
  use 'onsails/lspkind-nvim' -- vscode-like pictograms
  use 'hrsh7th/cmp-buffer' -- nvim-cmp source for buffer words
  use 'hrsh7th/cmp-nvim-lsp' -- nvim-cmp source for neovim's built-in LSP
  use { "mtoohey31/cmp-fish", as = "fish" }

  use 'hrsh7th/cmp-nvim-lua' -- nvim-cmp source for Lua keywords
  use 'hrsh7th/cmp-path' -- nvim-cmp source for file paths
  use 'saadparwaiz1/cmp_luasnip'
  use 'andersevenrud/cmp-tmux'
  use { 'tzachar/cmp-tabnine', run = './install.sh' }
  use 'hrsh7th/nvim-cmp' -- Completion
  use 'neovim/nvim-lspconfig' -- LSP
  use 'ray-x/cmp-treesitter'
  use 'bydlw98/cmp-env'
  use 'chrisgrieser/cmp-nerdfont'
  use "jcha0713/cmp-tw2css"

  use 'jose-elias-alvarez/null-ls.nvim' -- Use Neovim as a language server to inject LSP diagnostics, code actions, and more via Lua
  use 'williamboman/mason.nvim'
  use 'williamboman/mason-lspconfig.nvim'

  use 'glepnir/lspsaga.nvim' -- LSP UIs
  use { 'L3MON4D3/LuaSnip', requires = {
    { 'rafamadriz/friendly-snippets' },
    { 'avneesh0612/react-nextjs-snippets' },
  } } -- Snippets

  use {
    'nvim-treesitter/nvim-treesitter',
    run = function() require('nvim-treesitter.install').update({ with_sync = true }) end,
  }
  use 'nvim-treesitter/nvim-treesitter-context'
  use 'nvim-treesitter/nvim-treesitter-textobjects'
  -- use 'kyazdani42/nvim-web-devicons' -- File icons
  use 'nvim-tree/nvim-web-devicons'
  use 'nvim-telescope/telescope.nvim'
  use "nvim-telescope/telescope-live-grep-args.nvim"
  use 'nvim-telescope/telescope-file-browser.nvim'
  use "nvim-telescope/telescope-github.nvim"

  use 'windwp/nvim-autopairs'
  use 'windwp/nvim-ts-autotag'
  use { 'numToStr/Comment.nvim',
    requires = {
      'JoosepAlviste/nvim-ts-context-commentstring'
    }
  }

  use 'norcalli/nvim-colorizer.lua'
  -- use 'folke/zen-mode.nvim'
  -- use({
  --   "iamcco/markdown-preview.nvim",
  --   run = function() vim.fn["mkdp#util#install"]() end,
  -- })

  use 'nvim-tree/nvim-tree.lua'

  use 'lewis6991/gitsigns.nvim'
  use 'dinhhuy258/git.nvim' -- For git blame & browse

  use 'theprimeagen/harpoon'
  use "ThePrimeagen/refactoring.nvim"

  use 'tpope/vim-fugitive'
  use 'tpope/vim-abolish'
  use 'tpope/vim-unimpaired'
  use 'tpope/vim-dadbod'
  use 'tpope/vim-surround'
  use 'tpope/vim-markdown'
  use 'tpope/vim-obsession'
  use 'tpope/vim-dotenv'
  use 'tpope/vim-speeddating'
  use 'tpope/vim-repeat'
  use 'kristijanhusak/vim-dadbod-ui'

  use 'voldikss/vim-floaterm'
  use 'renerocksai/telekasten.nvim'
  use 'christoomey/vim-system-copy'
  use 'folke/which-key.nvim'
  use 'folke/todo-comments.nvim'

  use 'goolord/alpha-nvim'

  use "lewis6991/impatient.nvim"
  use "jbyuki/venn.nvim"

  use "zbirenbaum/copilot.lua"

  use 'jackMort/ChatGPT.nvim'
  use 'MunifTanjim/nui.nvim'

  -- use 'windwp/nvim-spectre'
  use 'mbbill/undotree'

  use 'jedrzejboczar/possession.nvim'

  -- Packer
  use { 'sindrets/diffview.nvim', requires = 'nvim-lua/plenary.nvim' }
  use 's1n7ax/nvim-window-picker'

  use { 'Wansmer/treesj', requires = 'nvim-treesitter' }

  use { "cshuaimin/ssr.nvim", module = "ssr" }
  use 'simrat39/symbols-outline.nvim'
  use { 'barrett-ruth/import-cost.nvim', run = 'sh install.sh yarn' }

  use "dnlhc/glance.nvim"
  use 'xorid/swap-split.nvim'
  use { 'weilbith/nvim-code-action-menu', cmd = 'CodeActionMenu' }

  use "rest-nvim/rest.nvim"

  -- Debugging

  use 'mfussenegger/nvim-dap'
  use "ravenxrz/DAPInstall.nvim"
  -- use 'Pocco81/dap-buddy.nvim'
  use "rcarriga/nvim-dap-ui"
  use 'David-Kunz/jester'

  use { 'akinsho/flutter-tools.nvim', requires = 'nvim-lua/plenary.nvim' }

  -- use 'vim-denops/denops.vim'
  -- use 'vim-denops/denops-helloworld.vim'
  use 'skanehira/k8s.vim'
  use 'frenchtoasters/telescope-kubectl.nvim'
  use 'pwntester/octo.nvim'

  use 'fuentastic/nvim-spectre'
  use 'rbong/vim-flog'
  use 'sudormrfbin/cheatsheet.nvim'
  use 'kkharji/sqlite.lua'
  use 'ecthelionvi/NeoComposer.nvim'
  use 'AckslD/muren.nvim'
  use 'stevearc/oil.nvim'

  use {
    'stevearc/overseer.nvim',
    config = function() require('overseer').setup() end
  }

  use { 'stevearc/dressing.nvim' }

  use { "mhanberg/output-panel.nvim",
    config = function() require("output_panel").setup() end
  }


  use {
    'LukasPietzschmann/telescope-tabs',
    requires = { 'nvim-telescope/telescope.nvim' },
    config = function()
      require 'telescope-tabs'.setup {
        -- Your custom config :^)
      }
    end
  }

  use {
    "sourcegraph/sg.nvim",
    run = "cargo build --workspace",
  }

  -- use {
  --   "Arekkusuva/jira-nvim",
  --   requires = {
  --     "nvim-telescope/telescope.nvim",
  --   },
  --   run = "make build",
  --   config = function()
  --     require("jira-nvim").setup({
  --       host = "https://dgngroep.atlassian.net",
  --       token_path = "~/.config/jira-nvim-token.txt",
  --     })
  --   end
  -- }

end,
  config = {
    display = {
      open_fn = function()
        return require('packer.util').float({ border = 'single' })
      end
    }
  }
})

if packer_bootstrap then
  require("packer").sync()
end
-- https://github.com/andrewferrier/debugprint.nvim
